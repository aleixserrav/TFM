import mysql.connector
import pandas as pd
from sklearn.linear_model import LinearRegression
import numpy as np
from collections import deque

errores_recientes = deque(maxlen=10)

# Par√°metros de conexi√≥n a MariaDB
config = {
    'user': 'grafana',
    'password': 'grafana',
    'host': 'localhost',
    'port': 3306,
    'database': 'database_global'
}

def actualizar_modelo_con_valor_real(predicho, real):
    """
    PROP√ìSITO
    Esta funci√≥n verifica la validez de los datos, calcula el error cometido por el modelo y lo guarda en un deque de longitud 10.

    PAR√ÅMETROS
    predicho: Variable tipo float que indica la √∫ltima predicci√≥n calculada por el modelo.
    real: Variable tipo float que indica el valor ambiental real le√≠do por el sensor.
    """
    if real is None:
        print("‚ö†Ô∏è Valor real es None, no se actualiza el modelo.")
        return
    if predicho is None:
        print("‚ö†Ô∏è Valor predicho es None, no se actualiza el modelo.")
        return

    real = (float(real))
    error = real - predicho
    errores_recientes.append(error)


def obtener_datos_locales(parametro_ambiental):
    """
    PROP√ìSITO
    Esta funci√≥n obtiene los 10 √∫ltimos valores del par√°metro ambiental seleccionado de la base de datos SQL local (database_global).
    Si la lectura se realiza con √©xito se muestra un mensaje de verificaci√≥n. De lo contrario muestra un mensaje de error.

    PAR√ÅMETROS
    parametro_ambiental: Variable tipo string que indica el par√°metro ambiental del cual se quieren obtener los datos. Puede ser:
        - 'temperatura'
        - 'humedad'
        - 'co2' """
    try:
        conn = mysql.connector.connect(**config)
        cursor = conn.cursor()

        query = f"""
            SELECT {parametro_ambiental}, timestamp
            FROM tabla_datos
            ORDER BY timestamp DESC
            LIMIT 10
        """
        cursor.execute(query)
        rows = cursor.fetchall()

        df = pd.DataFrame(rows, columns=[f"{parametro_ambiental}", "timestamp"])
        df = df.sort_values(by="timestamp")

        return df

    except Exception as e:
        print(f"‚ùå Error al obtener datos de {parametro_ambiental}: {e}")
        return None


def entrenar_y_predecir(df, parametro_ambiental):
    """
    PROP√ìSITO
    Entrenar un modelo de regresi√≥n lineal para predecir la siguiente muestra del par√°metro ambiental especificado.
    Si la predicci√≥n se realiza con √©xito, imprime un mensaje en la terminal indicando el valor predicho.
    Si la predicci√≥n falla, se imprime un mensaje de error.
    
    PAR√ÅMETROS
        - df: Un DataFrame que contiene los √∫ltimos 10 datos del par√°metro ambiental.
        - parametro_ambiental: Variable tipo string que indica qu√© columna del DataFrame se va a utilizar como variable objetivo para el modelo.
    """
    try:
        # Creamos una secuencia simple: [0, 1, 2, ..., N-1] como "tiempo"
        X = np.arange(len(df)).reshape(-1, 1)
        y = df[f"{parametro_ambiental}"].values

        model = LinearRegression()
        model.fit(X, y)

        # Predecimos el siguiente punto
        next_time = np.array([[len(df)]])
        pred = model.predict(next_time)[0]

        # Aplicar correcci√≥n si hay errores recientes
        if errores_recientes:
            correccion = np.mean(errores_recientes)
            pred -= correccion

        if parametro_ambiental == "temperatura":
            print(f"üîÆ Predicci√≥n de temperatura para el siguiente instante: {pred:.2f} ¬∞C")
        if parametro_ambiental == "humedad":
            print(f"üîÆ Predicci√≥n de humedad para el siguiente instante: {pred:.2f} %")
        if parametro_ambiental == "co2":
            print(f"üîÆ Predicci√≥n de co2 para el siguiente instante: {pred:.2f} ppm")
        return pred

    except Exception as e:
        print(f"‚ùå Error al predecir la siguiente muestra: {e}")
        return None
